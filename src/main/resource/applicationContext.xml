<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.2.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

   <!-- 创建 applicationContext.xml，定义数据库链接池、SqlSessionFactory。-->
        <!--加载数据库配置文件-->
    <context:property-placeholder location="classpath:dbConfig.properties"/>
        <!--数据库连接池，id 值固定:dataSource，class是连接池类全路径-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!--配置基本信息-->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
        <property name="maxActive" value="10"/>
    </bean>


        <!--整合 spring,mybatis 框架:把 SqlSession 等对象的创建交给 spring 容器,id 值固定:sqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--3.2 配置连接池，ref 指向连接池 bean 对象的 id 值-->
        <property name="dataSource" ref="dataSource"/>

        <!--3.1 mybatis 核心配置文件位置-->
        <property name="configLocation" value="classpath:mybatis-config_spring.xml"/>

        <!--3.3 扫描 XxxMapper.xml 映射文件，读取 sql 语句-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>


        <!--定义mapper接口扫描器-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--扫描所有所有Mapper 接口，把接口实例的创建交给 spring 容器-->
        <property name="basePackage" value="com.bh.impl"/>
    </bean>


    <!--配置需要扫描的包(service 层)：spring 自动扫描 base-package 下的类,
    若类上有@Controller,@Service,@Component 等注解,将会自动把类注册为 bean(即由 Spring 容器创建实例)-->
   <!-- <context:component-scan base-package="com.bh.service"/>-->
</beans>