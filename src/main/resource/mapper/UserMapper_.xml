<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--Mapper 接口方法名和映射文件中定义的 statement 的 id 相同
           Mapper 接口方法的输入参数类型和映射文件中定义的 statement 的 parameterType 的类型相同
           Mapper 接口方法的输出参数类型和映射文件中定义的 statement 的 resultType 的类型相同
           -->
<!--根据id获取用户信息
    id:标识映射文件中的sql将sql语句封装到mappedStatement对象中，所以id称为statement的id
    parameterType:指定输入参数类型 #{}：表示占位符#{id}：id表示接收输入的参数，名称是id如果输入参数是简单类型，参数名可以任意，如value或其它名称
    resultType:指定sql输出结果映射的java对象类型select 指定resultType表示将单条记录映射成java对象-->
<!--namespace为命名空间，功能是对sql语句进行分类管理，隔离sql语句-->
<mapper namespace="com.bh.impl.UserMapper">
     <!--根据id查询用户-->
    <select id="findUserById" parameterType="int" resultType="com.bh.pojo.User">
        select  *from user where id=#{id}
    </select>

        <!--自定义条件查询用户-->
    <select id="findUserByUserName" parameterType="java.lang.String" resultType="com.bh.pojo.User">
        select * from user where username like '%${value}%'
    </select>

    <!--添加用户 -->
    <insert id="insertUser" parameterType="com.bh.pojo.User">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            select LAST_INSERT_ID()
        </selectKey>
        insert into user (username,birthday,sex,address) values
        (#{username},#{birthday},#{sex},#{address})
    </insert>

    <!--用户综合信息查询用户列表和foreach-->
    <select id="findUserList" parameterType="com.bh.VO.UserQueryVo" resultType="com.bh.pojo.User">
            select *from user where username=#{user.username} and sex=#{user.sex}
        <if test="ids!=null">
            <foreach collection="ids" open=" and id in(" close=")" item="id" separator="," >
                #{id}
            </foreach>
        </if>

    </select>

    <!-- 传递 HashMap 综合查询用户信息-->
    <select id="findUserByHashMap" parameterType="java.util.Map" resultType="com.bh.pojo.User">
        select * from user where id=#{id} and username like '%${username}%'
    </select>


    <!--输出简单类型-->
    <select id="findUserByCount"  parameterType="com.bh.pojo.User" resultType="int">
           select count(1) from user
    </select>

   <!-- 根据id查询用户的信息 -->
    <select id="findUserListResultMap" parameterType="com.bh.pojo.User" resultMap="userListResultMap">
        select id ,username ,birthday  from user where id =#{value }

    </select>

  <!--  定义 resultMap,完成查询字段与user对象属性名称做对应关系
        type:最终映射的 java 对象
        id:resultMap 的唯一标识-->
    <resultMap id="userListResultMap" type="com.bh.pojo.User">
        <!--id 标签：查询结果集的唯一标识列
            column:sql 查询字段名（列名）
            property:实体类属性名-->
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="birthday" property="birthday"/>
    </resultMap>



  <!--  动态sql综合查询和foreach-->
    <select id="findUserListBy" parameterType="com.bh.VO.UserQueryVo" resultType="com.bh.pojo.User">
        select * from user 
        where 1=1
            <if test="userCustom!=null">
                <if test="userCustom.sex!=null  and userCustom.sex!=''">
                    and user.sex = #{userCustom.sex}
                </if>
                <if test="userCustom.username!=null and userCustom.username!=''">
                    and user.username like'%${userCustom.username}%'
                </if>
            </if>
            <if test="ids!=null">
                <foreach collection="ids" open=" and id in(" close=")" item="id" separator="," >
                #{id}
            </foreach>
        </if>
    </select>


        <!--sql片段 可以用于继承 提高了代码的复用性-->
    <select id="findUserListSql" parameterType="com.bh.pojo.User" resultType="com.bh.pojo.User">
        select  *from user
        <where>
            <include refid="sql_where"></include>
        </where>

    </select>
    <sql id="sql_where">
        <if test="id!=null and id!=''">
            and id=#{id}
        </if>
        <if test="username!=null and username!=''">
            and username like '%${username}%'
        </if>
    </sql>

</mapper>